import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpackConfig

plugins {
  alias(libs.plugins.android.application)
  alias(libs.plugins.build.konfig)
  alias(libs.plugins.compose.multiplatform)
  alias(libs.plugins.kotlin.compose)
  alias(libs.plugins.kotlin.multiplatform)
  alias(libs.plugins.kotlin.serialization)
  alias(libs.plugins.playpublisher)
}

def versionMajor = 0
def versionMinor = 8
def versionPatch = 0

kotlin {
  androidTarget {
    compilerOptions {
      jvmTarget.set(JvmTarget.JVM_17)
    }
  }

  wasmJs {
    moduleName = "app"
    browser {
      def rootDirPath = project.rootDir.path
      def projectDirPath = project.projectDir.path
      commonWebpackConfig {
        outputFileName = "app.js"

        if (devServer == null) {
          devServer = new KotlinWebpackConfig.DevServer()
        }

        if (devServer.static == null) {
          devServer.static = []
        }

        devServer.static.add(rootDirPath)
        devServer.static.add(projectDirPath)
      }
    }
    binaries.executable()
  }

  sourceSets {
    androidMain.dependencies {
      implementation libs.androidx.activity.compose
      implementation libs.ktor.client.okhttp
    }

    commonMain.dependencies {
      implementation compose.runtime
      implementation compose.foundation
      implementation compose.material3
      implementation compose.ui
      implementation compose.components.resources
      implementation compose.components.uiToolingPreview

      implementation libs.androidx.lifecycle.savedstate
      implementation libs.coil.compose
      implementation libs.coil.ktor
      implementation libs.coil.svg
      implementation libs.compose.backhandler
      implementation libs.continuous.corners
      implementation libs.kotlinx.collections.immutable
      implementation libs.kotlinx.datetime
      implementation libs.ktor.client.core
      implementation libs.ktor.client.content.negotiation
      implementation libs.ktor.serialization.kotlinx.json
      implementation libs.logging
    }

    commonTest.dependencies {
      implementation libs.assertk
      implementation libs.kotlin.test
      implementation libs.kotlinx.coroutines.test
      implementation libs.ktor.client.mock
    }
  }

  compilerOptions {
    freeCompilerArgs = [
            '-opt-in=androidx.compose.animation.ExperimentalSharedTransitionApi',
            '-opt-in=androidx.compose.material3.ExperimentalMaterial3Api',
            '-opt-in=androidx.compose.material3.ExperimentalMaterial3ExpressiveApi',
            '-opt-in=androidx.compose.ui.ExperimentalComposeUiApi',
            '-opt-in=kotlin.time.ExperimentalTime',
            '-opt-in=kotlinx.serialization.ExperimentalSerializationApi',
    ]
  }
}

android {
  namespace 'codes.chrishorner.reverserainbow'
  compileSdk = 36

  defaultConfig {
    applicationId "codes.chrishorner.reverserainbow"
    minSdk 31
    targetSdk 36
    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"
  }

  signingConfigs {
    debug {
      storeFile file('keys/debug.keystore')
      storePassword 'android'
      keyAlias 'androiddebugkey'
    }

    release {
      def uploadKey = file('keys/upload.keystore')
      storeFile uploadKey.exists() ? uploadKey : file('keys/debug.keystore')
      storePassword System.getenv("connections_planner_password") ?: 'android'
      keyAlias System.getenv("connections_planner_alias") ?: 'androiddebugkey'
      keyPassword System.getenv("connections_planner_password") ?: 'android'
    }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
    }

    release {
      minifyEnabled true
      shrinkResources true
      signingConfig signingConfigs.release
      proguardFiles file('shrinker_rules.pro')
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }

  buildFeatures {
    compose true
    buildConfig true
  }

  packagingOptions {
    resources {
      excludes += [
              '**/*.kotlin_metadata',
              'META-INF/*.kotlin_module',
              'META-INF/*.properties',
              '/*.properties',
      ]
    }
  }

  bundle {
    language {
      enableSplit = false // We currently only have one language.
    }
  }

  testOptions {
    unitTests {
      returnDefaultValues = true
    }
  }
}

play {
  serviceAccountCredentials = file('keys/play_access.json')
  defaultToAppBundles = true
  resolutionStrategy = com.github.triplet.gradle.androidpublisher.ResolutionStrategy.IGNORE
}

buildkonfig {
  packageName = 'codes.chrishorner.reverserainbow'

  defaultConfigs {
    buildConfigField 'STRING', 'versionName', versionMajor + '.' + versionMinor + '.' + versionPatch
  }
}